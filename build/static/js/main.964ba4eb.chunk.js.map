{"version":3,"sources":["components/FormLogin.js","utils/csClient.js","components/FormCreateConversation.js","components/FormJoinConversation.js","components/FormWhatsAppTextConversation.js","components/FormGetMyConversationMember.js","components/FormEnableAudioInConversations.js","components/Audio.js","utils/createRtcAudioConnection.js","components/EventsHistory.js","containers/LoggedPage.js","App.js","reportWebVitals.js","index.js"],"names":["FormLogin","onSubmit","useForm","register","handleSubmit","errors","htmlFor","type","id","name","aria-invalid","ref","required","maxLength","role","socket_io","require","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","logger","console","log","error","FormCreateConversation","conversation_name","conversation_display_name","FormJoinConversation","conversation_join_id","value","FormWhatsAppTextConversation","events","conversation_text_id","conversation_text","FormGetMyConversationMember","FormEnableAudioInConversations","defaultValue","audio_conversation_id","Audio","srcObject","props","refAudio","useRef","useEffect","current","controls","autoPlay","waitFirstICEGatheringComplete","peerConnection","a","Promise","resolve","reject","onicegatheringstatechange","iceGatheringState","createRtcAudioConnection","navigator","mediaDevices","getUserMedia","video","audio","localStream","RTCPeerConnection","iceServers","urls","optional","addStream","createOffer","offerDescription","setLocalDescription","EventTitle","event","style","text","request","response","body","EventsHistory","eventsHistory","onCleanHistoryClick","onClick","map","evt","idx","padding","margin","backgroundColor","JSON","stringify","csClient","sessionData","onEventCallbacks","onRequestStartCallbacks","onRequestEndCallbacks","token","session_id","cs_url","headers","url","data","originating_session","forEach","callback","axios","axiosResponse","status","requestError","message","connect","ws_url","capi_client","path","transports","forceNew","reconnection","autoConnect","Manager","on","packet","loginData","emit","user_id","user_name","getSessionData","onEvent","push","onRequestStart","onRequestEnd","CSClient","LoggedPage","lastCSClientEvent","useState","setEvent","setLastEvent","clientEvent","useCSClientEvents","setEvents","myConversationsState","setMyConversationsState","myMemberState","setMyMemberState","conversationsEvents","setConversationsEvents","audioSrcObject","audioState","setAudioState","initCSClient","onTrack","e","_setAudioSrcObject","getRemoteStreams","as","sdp","answer","remoteDescription","RTCSessionDescription","ontrack","setRemoteDescription","includes","conversations","_embedded","member","onEnableAudioInConversationSubmit","conversation_id","pc","method","userConvRes","member_id","find","from","offer","localDescription","onCreateConversationSubmit","convRes","onJoinConversationSubmit","getMyConversations","getMyConversationMember","sendTextToConversation","cid","className","length","state","BACKEND_URL","NotLoggedPage","onSubmitLogin","onSubmitSubscribe","App","setLoginData","setsubscribeData","username","loginRes","document","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.964ba4eb.chunk.js","sourcesContent":["import { useForm } from \"react-hook-form\";\n\nfunction FormLogin({ onSubmit }) {\n    const { register, handleSubmit, errors } = useForm();\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <label htmlFor=\"username\">User Name</label>\n\n            {/* use aria-invalid to indicate field contain error */}\n            <input\n                type=\"text\"\n                id=\"username\"\n                name=\"username\"\n                aria-invalid={errors.name ? \"true\" : \"false\"}\n                ref={register({ required: true, maxLength: 30 })}\n            />\n\n            {/* use role=\"alert\" to announce the error message */}\n            {errors.name && errors.name.type === \"required\" && (\n                <span role=\"alert\">This is required</span>\n            )}\n            {errors.name && errors.name.type === \"maxLength\" && (\n                <span role=\"alert\">Max length exceeded</span>\n            )}\n\n            <input type=\"submit\" />\n        </form>\n    )\n}\n\nexport default FormLogin","\nimport axios from 'axios';\n// import io from 'socket.io-client';\nconst socket_io = require('socket.io-client');\nfunction uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n}\n\n\nconst logger = {\n    info: (...args) => {\n        console.log(...args)\n    },\n    error: (...args) => {\n        console.error(...args)\n    }, \n}\n\n\nexport default function CSClient(){\n    let sessionData = {}\n    let onEventCallbacks = []\n    let onRequestStartCallbacks = []\n    let onRequestEndCallbacks = []\n\n    const onEvent = (callback) => {\n        const id = uuidv4()\n        onEventCallbacks.push({\n            id,\n            callback\n        }) \n        return id\n    }\n    const onRequestStart = (callback) => {\n        const id = uuidv4()\n        onRequestStartCallbacks.push({\n            id,\n            callback\n        })\n        return id\n    }\n\n    const onRequestEnd = (callback) => {\n        const id = uuidv4()\n        onRequestEndCallbacks.push({\n            id,\n            callback\n        })\n        return id\n    }\n\n    const request = async (request) => {\n        const { token, session_id, cs_url} = sessionData\n        try {\n            request.headers = {\n                'Authorization': `Bearer ${token}`,\n                // 'x-nexmo-sessionid': session_id\n            }\n            \n            request.url = `${cs_url}${request.url}`\n            if(request.data)\n                request.data = {\n                    originating_session: session_id,\n                    ...request.data\n                }\n\n            logger.info({ request }, \"CSClient request -> \")\n            onRequestStartCallbacks\n                .forEach(({ callback }) => callback({ request }))\n            const axiosResponse = await axios(request)\n            onRequestEndCallbacks\n                .forEach(({ callback }) => callback({\n                    request,\n                    response: {\n                        data: axiosResponse.data,\n                        status: axiosResponse.status,\n                        headers: axiosResponse.headers\n                    }\n                }))\n\n            logger.info({ request, data: axiosResponse.data, status: axiosResponse.status }, \"CSClient reponse <-\")\n            return axiosResponse\n        } catch (err) {\n            const requestError = {\n                request: request\n            }\n            if (err.response) {\n                requestError.response = {\n                    data: err.response.data,\n                    status: err.response.status,\n                    headers: err.response.headers,\n                }\n            }\n            if (err.message) {\n                requestError.message = err.message\n            }\n\n            logger.error({ ...requestError }, \"CSClient error <-\")\n            onRequestEndCallbacks\n                .forEach(({ callback }) => callback(requestError))\n\n            throw err;\n        }\n    }\n    // const onEvent = () => \n    const getSessionData = () => sessionData\n\n    const connect = async ({ token, cs_url, ws_url }) =>  new Promise(resolve => {\n\n        const capi_client = socket_io.connect(ws_url, {\n            path: \"/rtc\",\n            transports: ['websocket'],\n            forceNew: false,\n            reconnection: false,\n            autoConnect: true,\n        });\n\n        \n        require('socketio-wildcard')(socket_io.Manager)(capi_client)\n\n        capi_client.on('connect', function () {\n\n            capi_client.on('*', function (packet) {\n                const [type, body] = packet.data;\n                const event = { type, ...body };\n                // onEventCallback(event)\n                onEventCallbacks\n                    .forEach(({callback}) => callback(event) )\n\n            })\n            const loginData = {\n                \"device_id\": \"666666666666666\", // TODO: use https://github.com/Valve/fingerprintjs2\n                \"device_type\": \"js\",\n                token\n            }\n\n            capi_client.emit(\"session:login\", { body: loginData} )\n\n            capi_client.on(\"session:success\", (event) => {\n                const {id, name, user_id} = event.body\n                sessionData = {\n                    session_id: id,\n                    user_name: name,\n                    user_id: user_id,\n                    token,\n                    cs_url, \n                    ws_url\n\n                }\n                resolve()\n\n            })\n        })\n\n\n        \n    });\n\n    \n    return {\n        connect,\n        request,\n        getSessionData,\n        onEvent,\n        onRequestStart,\n        onRequestEnd\n    }\n\n}","// import React, { useState, useEffect, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\n\nfunction FormCreateConversation({ onSubmit }) {\n    const { register, handleSubmit, errors } = useForm();\n\n    return (\n        <form name=\"CreateConversation\" id=\"CreateConversation\" onSubmit={handleSubmit(onSubmit)}>\n            <label htmlFor=\"conversation_name\">Name</label>\n\n            {/* use aria-invalid to indicate field contain error */}\n            <input\n                type=\"text\"\n                id=\"conversation_name\"\n                name=\"conversation_name\"\n                aria-invalid={errors.conversation_name ? \"true\" : \"false\"}\n                ref={register({ required: true, maxLength: 30 })}\n            />\n            {errors.conversation_name && errors.conversation_name.type === \"required\" && (\n                <span role=\"alert\">This is required</span>\n            )}\n            {errors.conversation_name && errors.conversation_name.type === \"maxLength\" && (\n                <span role=\"alert\">Max length exceeded</span>\n            )}\n            <br />\n            <label htmlFor=\"conversation_display_name\">Display Name</label>\n            <input\n                type=\"text\"\n                id=\"conversation_display_name\"\n                name=\"conversation_display_name\"\n                aria-invalid={errors.conversation_display_name ? \"true\" : \"false\"}\n                ref={register({ required: true, maxLength: 30 })}\n            />\n\n            {/* use role=\"alert\" to announce the error message */}\n            {errors.conversation_display_name && errors.conversation_display_name.type === \"required\" && (\n                <span role=\"alert\">This is required</span>\n            )}\n            {errors.conversation_display_name && errors.conversation_display_name.type === \"maxLength\" && (\n                <span role=\"alert\">Max length exceeded</span>\n            )}\n            <br />\n            <input type=\"submit\" />\n        </form>\n    )\n}\n\nexport default FormCreateConversation","// import React, { useState, useEffect, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\n\nfunction FormJoinConversation({ onSubmit }) {\n    const { register, handleSubmit, errors } = useForm();\n\n    return (\n        <form name=\"joinConversation\" id=\"joinConversation\" onSubmit={handleSubmit(onSubmit)}>\n            <label htmlFor=\"conversation_join_id\">Conversation ID:</label>\n\n            <input\n                type=\"text\"\n                id=\"conversation_join_id\"\n                name=\"conversation_join_id\"\n                aria-invalid={errors.conversation_join_id ? \"true\" : \"false\"}\n                ref={register({ required: true, maxLength: 40 })}\n            />\n\n            {errors.conversation_join_id && errors.conversation_join_id.type === \"required\" && (\n                <span role=\"alert\">This is required</span>\n            )}\n            <br />\n\n            <input type=\"submit\" value=\"Join Conversation\" />\n        </form>\n    )\n}\n\nexport default FormJoinConversation","// import React, { useState, useEffect, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\n\nfunction FormWhatsAppTextConversation({ onSubmit, events }) {\n    const { register, handleSubmit, errors } = useForm();\n\n    return (\n        <div>\n            {/* {events &&\n            <div>\n            <h2>TEXT for Conversation</h2>\n            {events.map((evt, idx) => {\n                return (\n                    <div key={idx}  >\n                        <EventTitle event={evt} style={{ padding: \"5px\", margin: \"5px\" }} />\n                        <pre style={{ padding: \"5px\", margin: \"5px\", backgroundColor: \"#ddd\" }} >{JSON.stringify(evt, ' ', ' ')}</pre>\n                    </div>\n                )\n            })}\n            </div>\n            }  */}\n            <form name=\"whatsAppTextConversationText\" id=\"whatsAppTextConversationText\" onSubmit={handleSubmit(onSubmit)}>\n                <input\n                    type=\"text\"\n                    id=\"conversation_text\"\n                    name=\"conversation_text\"\n                    aria-invalid={errors.conversation_text_id ? \"true\" : \"false\"}\n                    ref={register({ required: true, maxLength: 40 })}\n                />\n\n                {errors.conversation_text && errors.conversation_text.type === \"required\" && (\n                    <span role=\"alert\">This is required</span>\n                )}\n                <br />\n\n                <input type=\"submit\" value=\"Send\" />\n            </form>\n        </div>\n        \n    )\n}\n\nconst EventTitle = ({ event, style }) => {\n    let text = 'unknown'\n    if (event.request && event.response) {\n        text = '<- http response'\n    } else if (event.request && !event.response) {\n        text = '-> http request'\n    } else if (event.type && event.body) {\n        text = '<- ws event'\n    }\n    return (<h3 style={style} >{text}</h3>)\n}\n\nexport default FormWhatsAppTextConversation","// import React, { useState, useEffect, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\n\nfunction FormGetMyConversationMember({ onSubmit }) {\n    const { register, handleSubmit, errors } = useForm();\n\n    return (\n        <div>\n            <form name=\"getConversation\" id=\"getConversation\" onSubmit={handleSubmit(onSubmit)}>\n                <label htmlFor=\"conversation_id\">Conversation ID:</label>\n\n                <input\n                    type=\"text\"\n                    id=\"conversation_id\"\n                    name=\"conversation_id\"\n                    aria-invalid={errors.conversation_text_id ? \"true\" : \"false\"}\n                    ref={register({ required: true, maxLength: 40 })}\n                />\n\n                {errors.conversation_text_id && errors.conversation_text_id.type === \"required\" && (\n                    <span role=\"alert\">This is required</span>\n                )}\n                <br />\n\n                <input type=\"submit\" value=\"Get Conversation\" />\n            </form>\n        </div>\n        \n    )\n}\n\nexport default FormGetMyConversationMember","\nimport { useForm } from \"react-hook-form\";\n\nfunction FormEnableAudioInConversations({ onSubmit }) {\n    const { register, handleSubmit, errors } = useForm();\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <label htmlFor=\"audio_conversation_id\">Conversations Id </label>\n\n            {/* use aria-invalid to indicate field contain error */}\n            <input\n                type=\"text\"\n                id=\"audio_conversation_id\"\n                name=\"audio_conversation_id\"\n                aria-invalid={errors.name ? \"true\" : \"false\"}\n                defaultValue=\"CON-71ed48a1-4983-4557-a911-561fcb380d2f\"\n                ref={register({ required: true, maxLength: 40, })}\n            />\n\n            {/* use role=\"alert\" to announce the error message */}\n            {errors.audio_conversation_id && errors.audio_conversation_id.type === \"required\" && (\n                <span role=\"alert\">This is required</span>\n            )}\n            {errors.audio_conversation_id && errors.audio_conversation_id.type === \"maxLength\" && (\n                <span role=\"alert\">Max length exceeded</span>\n            )}\n\n            <input type=\"submit\" />\n        </form>\n    )\n}\n\nexport default FormEnableAudioInConversations;","import React, { useRef, useEffect } from 'react';\n\nfunction Audio({ srcObject, ...props }) {\n    const refAudio = useRef(null)\n\n    useEffect(() => {\n        if (!refAudio.current) return\n        refAudio.current.srcObject = srcObject\n    }, [srcObject])\n\n    return <audio ref={refAudio} {...props} controls autoPlay />\n}\n\nexport default Audio","\nconst waitFirstICEGatheringComplete = async (peerConnection) => {\n    return new Promise((resolve, reject) => {\n        peerConnection.onicegatheringstatechange = () => {\n            console.log(\"onicegatheringstatechange \", peerConnection.iceGatheringState);\n            if (peerConnection.iceGatheringState === 'complete') {\n                resolve()\n            }\n        }\n    })\n\n}\n\n\nconst createRtcAudioConnection = async() => {\n    const localStream = await navigator.mediaDevices\n        .getUserMedia({\n            video: false,\n            audio: true,\n        })\n    \n    const peerConnection = new RTCPeerConnection(\n        {\n            iceServers: [\n                { urls: \"stun:stun.l.google.com:19302\", }\n            ],\n            'iceTransportPolicy': 'all',\n            'bundlePolicy': 'balanced',\n            'rtcpMuxPolicy': 'require',\n            'iceCandidatePoolSize': '0',\n        }, \n        {\n            optional: [{\n                'DtlsSrtpKeyAgreement': 'true',\n            }],\n        }\n    );    \n\n    peerConnection.addStream(localStream)\n    \n    const offerDescription = await peerConnection.createOffer()\n    \n    peerConnection.setLocalDescription(offerDescription)\n    \n    await waitFirstICEGatheringComplete(peerConnection)\n\n    return peerConnection\n\n}\n\n\nfunction _createRtcAudioConnection(){\n    return navigator.mediaDevices\n        .getUserMedia({\n            video: false,\n            audio: true,\n        })\n        .then((localStream) => {\n            console.log(\"RTCPeerConnection init\", localStream)\n            const iceServers = [\n                {\n                    urls: \"stun:stun.l.google.com:19302\",\n                    // urls: 'turn:138.68.169.35:3478?transport=tcp',\n                    // credential: 'bar',\n                    // username: 'foo2',\n                },\n            ]\n\n            var pc = new RTCPeerConnection({\n                iceServers,\n                'iceTransportPolicy': 'all',\n                'bundlePolicy': 'balanced',\n                'rtcpMuxPolicy': 'require',\n                'iceCandidatePoolSize': '0',\n            }, {\n                optional: [{\n                    'DtlsSrtpKeyAgreement': 'true',\n                }],\n            });\n\n            pc.addStream(localStream)\n\n            return pc\n        })\n        .then((pc) => {\n            console.log(\"create offer init\")\n            return pc.createOffer()\n                .then(offerDescription => pc.setLocalDescription(offerDescription))\n                .then(() => pc)\n        })\n        .then((pc) => {\n            console.log(\"onicegatheringstatechange init\")\n            return new Promise((resolve, reject) => {\n                pc.onicegatheringstatechange = () => {\n                    console.log(\"onicegatheringstatechange \", pc.iceGatheringState);\n                    if (pc.iceGatheringState === 'complete') {\n                        resolve(pc)\n                    }\n                }\n            })\n        })\n}\n\nexport default createRtcAudioConnection","\nconst EventsHistory = ({ eventsHistory, onCleanHistoryClick }) => {\n    return (\n        <div>\n            <h2>History</h2>\n            <div>\n                <button onClick={onCleanHistoryClick} >Clean History</button>\n            </div>\n            {eventsHistory.map((evt, idx) => {\n                return (\n                    <div key={idx}  >\n                        <EventTitle event={evt} style={{ padding: \"5px\", margin: \"5px\" }} />\n                        <pre style={{ padding: \"5px\", margin: \"5px\", backgroundColor: \"#ddd\" }} >{JSON.stringify(evt, ' ', ' ')}</pre>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\n\nconst EventTitle = ({ event, style }) => {\n    let text = 'unknown'\n    if (event.request && event.response) {\n        text = '<- http response'\n    } else if (event.request && !event.response) {\n        text = '-> http request'\n    } else if (event.type && event.body) {\n        text = '<- ws event'\n    }\n\n\n    return (<h3 style={style} >{text}</h3>)\n}\n\n\n\nexport default EventsHistory","import React, { useState, useEffect } from 'react';\n\nimport CSClient from '../utils/csClient'\nimport FormCreateConversation from '../components/FormCreateConversation'\nimport FormJoinConversation from '../components/FormJoinConversation'\nimport FormWhatsAppTextConversation from '../components/FormWhatsAppTextConversation'\nimport FormGetMyConversationMember from '../components/FormGetMyConversationMember'\nimport FormEnableAudioInConversations from '../components/FormEnableAudioInConversations'\nimport Audio from '../components/Audio'\nimport createRtcAudioConnection from '../utils/createRtcAudioConnection'\nimport EventsHistory from '../components/EventsHistory'\n\n\n\nconst csClient = CSClient()\n\nfunction useCSClientEvents(csClient) {\n\n    const [event, setEvent] = useState(null)\n\n    const setLastEvent = (clientEvent) => {\n        setEvent(clientEvent)\n    }\n\n    useEffect(() => {\n        csClient.onEvent(setLastEvent)\n        csClient.onRequestStart(setLastEvent)\n        csClient.onRequestEnd(setLastEvent)\n    })\n\n    return event\n}\n\nfunction LoggedPage(props) {\n\n    // const [csClient, setCsClient] = useState(null)\n\n    const lastCSClientEvent = useCSClientEvents(csClient)\n    const [eventsHistory, setEvents] = useState([])\n    const [myConversationsState, setMyConversationsState] = useState([])\n    const [myMemberState, setMyMemberState] = useState(\"\")\n    const [conversationsEvents, setConversationsEvents] = useState({})\n\n    // useCSClientEvents\n    const [audioState, setAudioState] = useState({\n        audioSrcObject: null,\n        peerConnection: null\n    })\n\n\n    //init cs client\n    useEffect(() => {\n        console.log(` ->->->-> useEffect init csClient`)\n\n        const initCSClient = async () => {\n            console.log(` ++++ initialize createCSClient`)\n            const { token, cs_url, ws_url } = props.loginData\n\n            csClient.connect({\n                token, cs_url, ws_url\n            });\n\n        }\n\n        initCSClient()\n\n\n    }, [props.loginData])\n\n    useEffect(() => {\n\n        const appendHistory = (clientEvent) => {\n            if (clientEvent)\n                setEvents(eventsHistory => [...eventsHistory, clientEvent])\n        }\n\n        appendHistory(lastCSClientEvent)\n\n    }, [lastCSClientEvent])\n\n\n    useEffect(() => {\n        console.log(` ->->->-> useEffect csClient Handler `, csClient);\n        if (!csClient)\n            return;\n\n        const onTrack = (e) => {\n            const _setAudioSrcObject = audioState.peerConnection.getRemoteStreams()[0]\n            console.log(`_setAudioSrcObject `, _setAudioSrcObject)\n\n            setAudioState(as => {\n                console.log(`setAudioState onTrack`, {\n                    ...as,\n                    audioSrcObject: _setAudioSrcObject\n                })\n                return {\n                    ...as,\n                    audioSrcObject: _setAudioSrcObject\n                }\n            })\n        }\n\n        csClient.onEvent(async (evt) => {\n            if (evt.type === 'rtc:answer') {\n                const sdp = evt.body.answer\n                const remoteDescription = new RTCSessionDescription({\n                    type: 'answer',\n                    sdp,\n                })\n                if (audioState.peerConnection) {\n                    audioState.peerConnection.ontrack = onTrack\n                    audioState.peerConnection.setRemoteDescription(remoteDescription)\n                }\n            }\n        })\n\n        csClient.onRequestEnd(async (event) => {\n            const url = event.request.url\n            if (url.includes(\"/users/\") && url.includes(\"/conversations\") ) {\n                const conversations = event.response.data._embedded.conversations\n                setMyConversationsState(conversations)\n            }\n        })\n\n        csClient.onRequestEnd(async (event) => {\n            const url = event.request.url\n            if (url.includes(\"/events\") ) {\n                console.log(\"EVENTS RESPONSE\", event.response)\n                const events = event.response.data._embedded.events\n                setConversationsEvents(events)\n            }\n        })\n\n        csClient.onRequestEnd(async (event) => {\n            const url = event.request.url\n            if (url.includes(\"/me\") ) {\n                console.log(\"ME RESPONSE\", event.response)\n                const member = event.response.data.id\n                setMyMemberState(member)\n            }\n        })\n\n    }, [audioState])\n\n    const onEnableAudioInConversationSubmit = async (data) => {\n        // const { conversation_id } = data\n        try {\n            console.log(`--- onEnableAudioInConversationSubmit`, data)\n            const { audio_conversation_id } = data\n            const conversation_id = audio_conversation_id\n            const pc = await createRtcAudioConnection()\n\n            console.log(`setAudioState `, { ...audioState, peerConnection: pc })\n            setAudioState({ ...audioState, peerConnection: pc })\n\n            // peerConnection = pc\n            const userConvRes = await csClient.request({\n                url: `/v0.3/users/${csClient.getSessionData().user_id}/conversations`,\n                method: \"get\"\n            })\n\n            const member_id = userConvRes.data._embedded.conversations.find(({ id }) => id === conversation_id)._embedded.member.id\n\n            await csClient.request({\n                url: `/v0.1/conversations/${conversation_id}/rtc`,\n                method: \"post\",\n                data: {\n                    from: member_id,\n                    body: {\n                        offer: pc.localDescription,\n                    }\n                }\n            })\n\n        } catch (e) {\n            console.log(`onEnableAudioInConversationSubmit error: `, e)\n        }\n\n    }\n\n    const onCreateConversationSubmit = async (data) => {\n        const { conversation_name, conversation_display_name } = data\n        const convRes = await csClient.request({\n            url: `/v0.3/conversations`,\n            method: \"post\",\n            data: {\n                \"name\": conversation_name,\n                \"display_name\": conversation_display_name\n            }\n        })\n\n        await csClient.request({\n            url: `/v0.3/conversations/${convRes.data.id}/members`,\n            method: \"post\",\n            data: {\n                \"state\": \"joined\",\n                \"user\": {\n                    name: csClient.getSessionData().user_name,\n                },\n                \"channel\": {\n                    \"type\": \"app\"\n                }\n            }\n        })\n\n    }\n\n    const onJoinConversationSubmit = async (data) => {\n        console.log('onJoinConversationSubmit ', data)\n        const { conversation_join_id} = data\n        await csClient.request({\n            url: `/v0.3/conversations/${conversation_join_id}/members`,\n            method: \"post\",\n            data: {\n                \"state\": \"joined\",\n                \"user\": {\n                    name: csClient.getSessionData().user_name,\n                },\n                \"channel\": {\n                    \"type\": \"app\"\n                }\n            }\n        })\n\n    }\n\n    const getMyConversations = async () => {\n        await csClient.request({\n            url: `/v0.3/users/${csClient.getSessionData().user_id}/conversations`,\n            method: \"get\"\n        })\n    }\n\n    const getMyConversationMember = async (data) => {\n        const { conversation_id } = data\n        await csClient.request({\n            url: `/v0.3/conversations/${conversation_id}/members/me`,\n            method: \"get\"\n        })\n        await csClient.request({\n            url: `/v0.3/conversations/${conversation_id}/events`,\n            method: \"get\"\n        })\n    }\n\n    const getConversationEvents = async (data) => {\n        const { conversation_id } = data\n        await csClient.request({\n            url: `/v0.3/conversations/${conversation_id}/events`,\n            method: \"get\"\n        })\n    }\n\n    const sendTextToConversation = async (data) => {\n        const { conversation_id, text } = data\n        const member = myMemberState;\n        await csClient.request({\n            url: `/v0.3/conversations/${conversation_id}/events`,\n            method: \"post\",\n            data: {\n                type: 'text',\n                cid: conversation_id,\n                from: member,\n                body: {\n                  text\n                }\n              }\n            });   \n        }\n\n    \n    return (\n        <div className=\"App\">\n            <h1>Conversations Client Playground</h1>\n            <div>\n                <h2>Create Conversation and Join</h2>\n                <FormCreateConversation onSubmit={onCreateConversationSubmit} />\n                <h2>Join Conversation</h2>\n                <FormJoinConversation onSubmit={onJoinConversationSubmit} />\n                <h2>Get My Conversations</h2>\n                <button onClick={getMyConversations} >Get My Conversations</button>\n                <h2>Get Conversation</h2>\n                <FormGetMyConversationMember onSubmit={getMyConversationMember} />\n                <h2>Text To Conversation</h2>\n                <FormWhatsAppTextConversation \n                    onSubmit={sendTextToConversation} \n                    events={conversationsEvents}\n                />\n                <h2>Enable Audio In Conversations</h2>\n                <FormEnableAudioInConversations onSubmit={onEnableAudioInConversationSubmit} />\n                <Audio srcObject={audioState.audioSrcObject} />\n                <div>\n                    Conversations ({myConversationsState.length})\n                    {myConversationsState.length && <div>\n                        {myConversationsState.map(({ name, id, _embedded}) => {\n                            const { member } = _embedded\n                            return (<div key={id}>\n                                <b>{name}: </b>{id} - {member.state} - {member.id}\n                            </div>)\n                        })}\n                        \n\n                    </div>\n\n                    }\n                </div>\n\n                <EventsHistory\n                    eventsHistory={eventsHistory}\n                    onCleanHistoryClick={() => setEvents(() => [])}\n                />\n            </div>\n\n        </div>\n    );\n}\n\nexport default LoggedPage","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport FormLogin from \"./components/FormLogin\";\n\nimport LoggedPage from \"./containers/LoggedPage.js\";\n\nimport \"./App.css\";\n\nconst BACKEND_URL = `http://localhost:5001`;\n\nfunction App() {\n  const [loginData, setLoginData] = useState(null);\n  const [subscribeData, setsubscribeData] = useState(null);\n\n  const onSubmitLogin = async ({ username }) => {\n    const loginRes = await axios({\n      url: `${BACKEND_URL}/api/login`,\n      method: \"post\",\n      data: {\n        username: username,\n      },\n    });\n    setLoginData(loginRes.data);\n  };\n\n  const onSubmitSubscribe = async ({ username }) => {\n    const loginRes = await axios({\n      url: `${BACKEND_URL}/api/subscribe`,\n      method: \"post\",\n      data: {\n        username: username,\n      },\n    });\n    setsubscribeData(loginRes.data);\n  };\n\n  useEffect(() => {\n    document.title = \"Conversation Service examples\";\n  });\n\n  return (\n    <div>\n      {!loginData && (\n        <NotLoggedPage\n          onSubmitLogin={onSubmitLogin}\n          onSubmitSubscribe={onSubmitSubscribe}\n        />\n      )}\n      {loginData && <LoggedPage loginData={loginData} />}\n    </div>\n  );\n}\n\nconst NotLoggedPage = ({ onSubmitLogin, onSubmitSubscribe }) => {\n  return (\n    <div>\n      <h2>Login</h2>\n      <FormLogin onSubmit={onSubmitLogin} />\n      <h2>Subscribe</h2>\n      <FormLogin onSubmit={onSubmitSubscribe} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}